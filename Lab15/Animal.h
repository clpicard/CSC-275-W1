//
// Created by caden.picard
//
// This stuff autogenerated when I created the .cpp and .h files in CLion
#ifndef ANIMAL_H
#define ANIMAL_H


// Base class Animal - Abstract class because of the pure virtual function
class Animal {
protected:
    int id;
    std::string name;
    std::string shelter;


public:
    // Default constructor - sets basic values because all animals deserve an identity!
    Animal() : id(0), name("Paco"), shelter("Le Grand Blanc") {}

    // Parameterized constructor - because not all animals are "Paco"
    Animal(int id, std::string name, std::string shelter) : id(id), name(name), shelter(shelter) {}

    // Getter and Setter methods - keep things neat and organized
    int getId(){ return id; }
    std::string getName(){ return name; }
    std::string getShelter(){ return shelter; }


    void setId(int newId) { id = newId; }
    void setName(std::string& newName) { name = newName; }
    void setShelter(std::string& newShelter) { shelter = newShelter; }

    // Pure virtual function - abstract class vibes here
    // Answer provided by gpt. Troubleshooting errors.
    virtual void makeSound() const = 0;  // Pure virtual function
    virtual ~Animal() {}                // Virtual destructor with empty definition
};

#endif //ANIMAL_H